const memberapplication = db.define(
    "memberapplication",
    {
        id: {
            type: Sequelize.INTEGER,
            primaryKey: true,
            autoIncrement: true,
        },
        applicationid: { type: Sequelize.INTEGER },
        applicationstepscompleted: { type: Sequelize.INTEGER },
        cfefinalexammarksdate: { type: Sequelize.DATE },
        citizenshipexplanation: { type: Sequelize.STRING(500) },
        citizenshipstatus: { type: Sequelize.STRING(60) },
        citizenshipstatusotherreason: { type: Sequelize.STRING(256) },
        clientid: { type: Sequelize.INTEGER },
        clientidapplicant: { type: Sequelize.INTEGER },
        clientidcparecognizedbody: { type: Sequelize.INTEGER },
        cpacanadanumber: { type: Sequelize.STRING(500) },
        createddate: { type: Sequelize.DATE },
        currentdesignation: { type: Sequelize.STRING(500) },
        documentidnotarizedapplication: { type: Sequelize.INTEGER },
        documentidresume: { type: Sequelize.INTEGER },
        hasagreedstatutorydeclaration: { type: Sequelize.BOOLEAN },
        incometaxreceiptrequired: { type: Sequelize.BOOLEAN },
        informalname: { type: Sequelize.STRING(500) },
        isunemployed: { type: Sequelize.BOOLEAN },
        mranumber: { type: Sequelize.STRING(500) },
        nameoncertificate: { type: Sequelize.STRING(500) },
        previouslyregisteredstudent: { type: Sequelize.BOOLEAN },
        previouslyregisteredstudentbegin: { type: Sequelize.DATE },
        previouslyregisteredstudentend: { type: Sequelize.DATE },
        questionresponseai: { type: Sequelize.BOOLEAN },
        questionresponseaii: { type: Sequelize.BOOLEAN },
        questionresponseb: { type: Sequelize.BOOLEAN },
        questionresponsec: { type: Sequelize.BOOLEAN },
        questionresponsed: { type: Sequelize.BOOLEAN },
        questionresponsee: { type: Sequelize.BOOLEAN },
        questionresponsef: { type: Sequelize.BOOLEAN },
        refapplicationstatusid: { type: Sequelize.INTEGER },
        refapplicationtypeid: { type: Sequelize.INTEGER },
        refcitizenshipstatusid: { type: Sequelize.INTEGER },
        reflegacyorganzationid: { type: Sequelize.INTEGER },
        refmemberapplicationpathid: { type: Sequelize.INTEGER },
        refpreferredbillingaddresstypeid: { type: Sequelize.INTEGER },
        refpreferredemailaddresstypeid: { type: Sequelize.INTEGER },
        refpreferredmailingaddresstypeid: { type: Sequelize.INTEGER },
        refpreferredphoneaddresstypeid: { type: Sequelize.INTEGER },
        refpreferredshippingaddresstypeid: { type: Sequelize.INTEGER },
        refresidencydeclarationcountryid: { type: Sequelize.INTEGER },
        registeredstudentorcasb: { type: Sequelize.BOOLEAN },
        registeredstudentorcasbyearufepassed: { type: Sequelize.INTEGER },
        residencydeclarationaccountingbody: { type: Sequelize.STRING(500) },
        residencydeclarationyears: { type: Sequelize.INTEGER },
        submitteddate: { type: Sequelize.DATE },
        updatedate: { type: Sequelize.DATE },
        refaffiliateprovince: { type: Sequelize.INTEGER },
        recordstatus: {
            type: Sequelize.STRING,
            defaultValue: "A",
        },
    },
    {
        timestamps: false,
        freezeTableName: true,
        hasTrigger: true,
    },
);

memberapplication.associate = function (db) {
    db.models.memberapplication.hasMany(db.models.memberapplicationpostsecondary, {
        foreignKey: "memberapplicationid",
        constraints: false,
        unique: false,
        as: "memberapplicationpostsecondary",
    });
    db.models.memberapplication.hasMany(db.models.memberapplicationemployment, {
        foreignKey: "memberapplicationid",
        constraints: false,
        unique: false,
        as: "memberapplicationemployment",
    });
    db.models.memberapplication.hasMany(db.models.memberapplicationmembership, {
        foreignKey: "memberapplicationid",
        constraints: false,
        unique: false,
        as: "memberapplicationmembership",
    });
    db.models.memberapplication.hasOne(db.models.application, {
        foreignKey: "id",
        constraints: false,
        unique: false,
        as: "application",
    });
};
