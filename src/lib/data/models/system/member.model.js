const member = db.define(
    "member",
    {
        id: {
            type: Sequelize.INTEGER,
            primaryKey: true,
            autoIncrement: true,
        },
        albertamembmeansdate: { type: Sequelize.DATE },
        assurancehours: { type: Sequelize.DECIMAL(18) },
        birthdate: { type: Sequelize.DATE },
        breadthassurance: { type: Sequelize.BOOLEAN },
        breadthfinance: { type: Sequelize.BOOLEAN },
        breadthgovernance: { type: Sequelize.BOOLEAN },
        breadthmanagement: { type: Sequelize.BOOLEAN },
        breadthperformance: { type: Sequelize.BOOLEAN },
        breadthtaxation: { type: Sequelize.BOOLEAN },
        cicachangedate: { type: Sequelize.DATE },
        cicano: { type: Sequelize.STRING(10) },
        clientid: { type: Sequelize.INTEGER },
        compilationhours: { type: Sequelize.INTEGER },
        cpdcourseprovider: { type: Sequelize.INTEGER },
        cpdcoursetaken: { type: Sequelize.BOOLEAN },
        cpdcoursetakendate: { type: Sequelize.DATE },
        cpereportexcemption: { type: Sequelize.BOOLEAN },
        currentregdate: { type: Sequelize.DATE },
        depthassurance: { type: Sequelize.BOOLEAN },
        depthfinance: { type: Sequelize.BOOLEAN },
        depthgovernance: { type: Sequelize.BOOLEAN },
        depthmanagement: { type: Sequelize.BOOLEAN },
        depthperformance: { type: Sequelize.BOOLEAN },
        depthtaxation: { type: Sequelize.BOOLEAN },
        designation: { type: Sequelize.STRING(75) },
        experiencetotalmonths: { type: Sequelize.INTEGER },
        experienceverificationmonths: { type: Sequelize.INTEGER },
        finalmarksdate: { type: Sequelize.DATE },
        firstmembcountrydate: { type: Sequelize.DATE },
        firstmembprovincedate: { type: Sequelize.DATE },
        gmatdate: { type: Sequelize.DATE },
        gmatscore: { type: Sequelize.INTEGER },
        hascorefinancialreporting: { type: Sequelize.BOOLEAN },
        hascoremanagementaccounting: { type: Sequelize.BOOLEAN },
        hascorereportingandaccounting: { type: Sequelize.BOOLEAN },
        iaeligible: { type: Sequelize.BOOLEAN },
        icaafcaapproveddate: { type: Sequelize.DATE },
        initialregdate: { type: Sequelize.DATE },
        iscpausbilling: { type: Sequelize.BOOLEAN },
        isenablingcompetenciesmet: { type: Sequelize.BOOLEAN },
        isusedesignation: { type: Sequelize.BOOLEAN },
        knownas: { type: Sequelize.STRING(75) },
        mailname: { type: Sequelize.STRING(150) },
        nameofpreapprovedprogram: { type: Sequelize.STRING(500) },
        otherhours: { type: Sequelize.INTEGER },
        preapprovedprogrammonths: { type: Sequelize.INTEGER },
        previousname: { type: Sequelize.STRING(75) },
        primeprovincechangedate: { type: Sequelize.DATE },
        recordstatus: { type: Sequelize.CHAR(1) },
        refalbertamembmeansid: { type: Sequelize.INTEGER },
        refbillingprovinceid: { type: Sequelize.INTEGER },
        refcanadamembmeansid: { type: Sequelize.INTEGER },
        refclientstatusid: { type: Sequelize.INTEGER },
        refclientsubstatusid: { type: Sequelize.INTEGER },
        refcurrentregulationcode: { type: Sequelize.INTEGER },
        refemploymentexpid: { type: Sequelize.INTEGER },
        reffirstmembcountryid: { type: Sequelize.INTEGER },
        reffirstmembprovinceid: { type: Sequelize.INTEGER },
        refgenderid: { type: Sequelize.INTEGER },
        refgmatpurposecode: { type: Sequelize.INTEGER },
        refnodegreereasoncodeid: { type: Sequelize.INTEGER },
        refsubstatusreasonid: { type: Sequelize.INTEGER },
        reftitleid: { type: Sequelize.INTEGER },
        regdate: { type: Sequelize.DATE },
        registeredname: { type: Sequelize.STRING(150) },
        reportedaudithours: { type: Sequelize.DECIMAL(10) },
        reviewhours: { type: Sequelize.DECIMAL(18) },
        spousesname: { type: Sequelize.STRING(75) },
        substatusreasoneffectivedate: { type: Sequelize.DATE },
        taxhours: { type: Sequelize.DECIMAL(18) },
        tieredaccounting: { type: Sequelize.BOOLEAN },
        tieredaccountingdate: { type: Sequelize.DATE },
        tieredaudit: { type: Sequelize.BOOLEAN },
        tieredauditdate: { type: Sequelize.DATE },
        tieredbusiness: { type: Sequelize.BOOLEAN },
        tieredbusinessdate: { type: Sequelize.DATE },
        tieredcompilation: { type: Sequelize.BOOLEAN },
        tieredcompilationdate: { type: Sequelize.DATE },
        tieredforensic: { type: Sequelize.BOOLEAN },
        tieredforensicdate: { type: Sequelize.DATE },
        tieredinsolvency: { type: Sequelize.BOOLEAN },
        tieredinsolvencydate: { type: Sequelize.DATE },
        tieredother: { type: Sequelize.BOOLEAN },
        tieredotherdate: { type: Sequelize.DATE },
        tieredreview: { type: Sequelize.BOOLEAN },
        tieredreviewdate: { type: Sequelize.DATE },
        tieredtaxation: { type: Sequelize.BOOLEAN },
        tieredtaxationdate: { type: Sequelize.DATE },
        totalchargablehours: { type: Sequelize.DECIMAL(18) },
        ufeeligible: { type: Sequelize.BOOLEAN },
        updatecount: { type: Sequelize.INTEGER },
        ispprpmentor: { type: Sequelize.BOOLEAN },
        finalexammarksyear: { type: Sequelize.INTEGER },
        hascfebreadthfinance: { type: Sequelize.BOOLEAN },
        hascfedepthfinancialreporting: { type: Sequelize.BOOLEAN },
        hascfedepthauditassurance: { type: Sequelize.BOOLEAN },
        refcanadamembmeansid: { type: Sequelize.INTEGER },
        recordstatus: {
            type: Sequelize.STRING,
            defaultValue: "A",
        },
    },
    {
        timestamps: false,
        freezeTableName: true,
        hasTrigger: true,
    },
);

member.associate = function (db) {
    db.models.member.belongsTo(db.models.client, {
        foreignKey: "clientid",
        constraints: false,
        unique: false,
        as: "client",
    });
    db.models.member.hasMany(db.models.memberduestatushistory, {
        foreignKey: "memberid",
        constraints: false,
        unique: false,
        as: "memberduestatushistory",
    });
    db.models.member.hasMany(db.models.clientaddress, {
        foreignKey: "clientid",
        sourceKey: "clientid",
        constraints: false,
        unique: false,
        as: "clientaddress",
    });
    db.models.member.hasMany(db.models.memberemployment, {
        foreignKey: "clientid",
        sourceKey: "clientid",
        constraints: false,
        unique: false,
        as: "memberemployment",
    });
    db.models.member.hasMany(db.models.membercondition, {
        foreignKey: "clientid",
        constraints: false,
        unique: false,
        as: "membercondition",
    });
};
