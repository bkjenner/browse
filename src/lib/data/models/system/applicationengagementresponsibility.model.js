const applicationengagementresponsibility = db.define(
    "applicationengagementresponsibility",
    {
        id: {
            type: Sequelize.INTEGER,
            primaryKey: true,
            autoIncrement: true,
        },
        clientidmember: { type: Sequelize.INTEGER },
        documentidassessmentresult: { type: Sequelize.INTEGER },
        functionother: { type: Sequelize.STRING(500) },
        hasaccountingservices: { type: Sequelize.BOOLEAN },
        hasauditengagement: { type: Sequelize.BOOLEAN },
        hasbusinessvaluation: { type: Sequelize.BOOLEAN },
        hascompilationengagement: { type: Sequelize.BOOLEAN },
        hasforensicaccounting: { type: Sequelize.BOOLEAN },
        hasinsolvency: { type: Sequelize.BOOLEAN },
        hasotherservices: { type: Sequelize.BOOLEAN },
        hasreviewengagement: { type: Sequelize.BOOLEAN },
        hasspecifiedauditingprocedure: { type: Sequelize.BOOLEAN },
        hastaxservices: { type: Sequelize.BOOLEAN },
        isies8complianceattested: { type: Sequelize.BOOLEAN },
        refengagementresponsibilitypartnertypeid: { type: Sequelize.INTEGER },
        updatecount: { type: Sequelize.INTEGER },
        withfirmsincedate: { type: Sequelize.DATE },
        fsapproval: { type: Sequelize.BOOLEAN(1) },
        signedaudited: { type: Sequelize.BOOLEAN(1) },
        signedreviewed: { type: Sequelize.BOOLEAN(1) },
        otherservicedetail: { type: Sequelize.STRING(500) },
        applicationid: { type: Sequelize.INTEGER(4) },
        firstname: { type: Sequelize.STRING(75) },
        middlename: { type: Sequelize.STRING(100) },
        surname: { type: Sequelize.STRING(75) },
        assessmentcomplete: { type: Sequelize.BOOLEAN(1) },
        hasdeclaredonmainoffice: { type: Sequelize.BOOLEAN },
        registeredname: { type: Sequelize.STRING(100) },
        applicationstaffid: { type: Sequelize.INTEGER },
        linkedentitynumber: { type: Sequelize.INTEGER },
        otherdetails: { type: Sequelize.STRING(500) },
        assessmentfilename: { type: Sequelize.STRING(500) },
        originalid: { type: Sequelize.INTEGER },
        linkedentityclientid: { type: Sequelize.INTEGER },
        recordstatus: {
            type: Sequelize.STRING,
            defaultValue: "A",
        },
    },
    {
        timestamps: false,
        freezeTableName: true,
        hasTrigger: true,
    },
);
