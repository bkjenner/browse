const donation = db.define(
    "donation",
    {
        id: {
            type: Sequelize.INTEGER,
            primaryKey: true,
            autoIncrement: true,
        },
        clientid: { type: Sequelize.INTEGER },
        offeringid: { type: Sequelize.INTEGER },
        transactionsid: { type: Sequelize.INTEGER },
        processdate: { type: Sequelize.DATE },
        amount: { type: Sequelize.DECIMAL },
        isanonymous: { type: Sequelize.BOOLEAN },
        receiptid: { type: Sequelize.INTEGER },
        employeeid: { type: Sequelize.INTEGER },
        comments: { type: Sequelize.STRING(500) },
        recordstatus: {
            type: Sequelize.STRING,
            defaultValue: "A",
        },
        updatecount: { type: Sequelize.INTEGER },
        cashreceiptid: { type: Sequelize.INTEGER },
        donationfundid: { type: Sequelize.INTEGER },
        addressline1: { type: Sequelize.STRING(500) },
        addressline2: { type: Sequelize.STRING(500) },
        city: { type: Sequelize.STRING(500) },
        country: { type: Sequelize.STRING(500) },
        emailprimary: { type: Sequelize.STRING(500) },
        emailsecondary: { type: Sequelize.STRING(500) },
        firmname: { type: Sequelize.STRING(500) },
        firstname: { type: Sequelize.STRING(500) },
        lastname: { type: Sequelize.STRING(500) },
        phonenumber: { type: Sequelize.STRING(500) },
        postalcode: { type: Sequelize.STRING(500) },
        province: { type: Sequelize.STRING(500) },
        clientidcontact: { type: Sequelize.INTEGER },
        isorganization: { type: Sequelize.BOOLEAN },
        isregisteredcharity: { type: Sequelize.BOOLEAN },
        mobile: { type: Sequelize.STRING(20) },
        ischarity: { type: Sequelize.BOOLEAN },
        hasoptedfordonorrecognition: { type: Sequelize.BOOLEAN },
        hasoptedforfoundationemails: { type: Sequelize.BOOLEAN },
    },
    {
        timestamps: false,
        freezeTableName: true,
        hasTrigger: true,
    },
);
