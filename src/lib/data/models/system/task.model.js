const task = db.define(
    "task",
    {
        id: {
            type: Sequelize.INTEGER,
            primaryKey: true,
            autoIncrement: true,
        },
        assignedondate: { type: Sequelize.DATE },
        clientidassignedby: { type: Sequelize.INTEGER },
        clientidassignedto: { type: Sequelize.INTEGER },
        clientidcreatedby: { type: Sequelize.INTEGER },
        clientidupdatedby: { type: Sequelize.INTEGER },
        createddate: { type: Sequelize.DATE },
        refdepartmentid: { type: Sequelize.INTEGER },
        reftasklinkedsourceid: { type: Sequelize.INTEGER },
        reftaskpriorityid: { type: Sequelize.INTEGER },
        reftaskstatusid: { type: Sequelize.INTEGER },
        refteamid: { type: Sequelize.INTEGER },
        taskduedate: { type: Sequelize.DATE },
        tasklinkedsourcename: { type: Sequelize.STRING(500) },
        tasklinkedsourcerowid: { type: Sequelize.INTEGER },
        tasknotes: { type: Sequelize.STRING(8000) },
        tasktitle: { type: Sequelize.STRING(500) },
        updateddate: { type: Sequelize.DATE },
        updatecount: { type: Sequelize.INTEGER },
        workflowid: { type: Sequelize.INTEGER },
        workflow: { type: Sequelize.STRING(100) },
        workflowdata: { type: Sequelize.TEXT },
        recordstatus: {
            type: Sequelize.STRING(1),
            defaultValue: "A",
        },
    },
    {
        timestamps: false,
        freezeTableName: true,
        hasTrigger: true,
    },
);
