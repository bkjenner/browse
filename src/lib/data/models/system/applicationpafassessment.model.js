const applicationpafassessment = db.define(
    "applicationpafassessment",
    {
        id: {
            type: Sequelize.INTEGER,
            primaryKey: true,
            autoIncrement: true,
        },
        applicationid: { type: Sequelize.INTEGER },
        clientid: { type: Sequelize.INTEGER },
        clientidemployer: { type: Sequelize.INTEGER },
        clientiddesignatedmember: { type: Sequelize.INTEGER },
        cpacanadaidnumber: { type: Sequelize.STRING(500) },
        declarationdatetime: { type: Sequelize.DATE },
        documentidcpdresult: { type: Sequelize.INTEGER },
        documentidpublicpracticecourse: { type: Sequelize.INTEGER },
        cvfilename: { type: Sequelize.STRING(500) },
        email: { type: Sequelize.STRING(500) },
        hasoverviewofpublicpracticecourse: { type: Sequelize.BOOLEAN },
        islegacyca: { type: Sequelize.BOOLEAN },
        islegacycga: { type: Sequelize.BOOLEAN },
        islegacycma: { type: Sequelize.BOOLEAN },
        isregisteredinotherprovince: { type: Sequelize.BOOLEAN },
        pafname: { type: Sequelize.STRING(500) },
        phonenumber: { type: Sequelize.STRING(500) },
        refpaymentstatusid: { type: Sequelize.INTEGER },
        refreasonforassessmentid: { type: Sequelize.INTEGER },
        updatecount: { type: Sequelize.INTEGER },
        firmstobemerged: { type: Sequelize.STRING(500) },
        splittingfirms: { type: Sequelize.STRING(500) },
        transcriptuploaded: { type: Sequelize.BOOLEAN },
        intendtoprovidebusinessvaluationinsolvency: {
            type: Sequelize.BOOLEAN(1),
        },
        intendtosubcontractservices: { type: Sequelize.BOOLEAN(1) },
        authorityletterfilenames: { type: Sequelize.STRING(500) },
        transcriptfilenames: { type: Sequelize.STRING(500) },
        recordstatus: {
            type: Sequelize.STRING,
            defaultValue: "A",
        },
    },
    {
        timestamps: false,
        freezeTableName: true,
        hasTrigger: true,
    },
);
